package com.kavex.xtoke.controle_estoque.domain.exception;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;

@Getter
@RequiredArgsConstructor
public enum ErroMensagem {

    // üîπ Erros 400 - BAD_REQUEST
    ESTOQUE_INSUFICIENTE(HttpStatus.BAD_REQUEST, "Estoque insuficiente para o produto."),
    VENDA_NAO_PERMITIDA(HttpStatus.BAD_REQUEST, "Venda n√£o permitida devido a restri√ß√µes."),
    VENDA_NAO_PENDENTE(HttpStatus.BAD_REQUEST, "Apenas vendas pendentes podem ser manipuladas."),
    PRODUTO_DUPLICADO(HttpStatus.BAD_REQUEST, "Ops, Duplicado! J√° existe um Produto com esse nome cadastrado."),
    CPF_CNPJ_DUPLICADO(HttpStatus.BAD_REQUEST, "Ops, Duplicado! CPF/CNPJ j√° cadastrado na Base de Dados."),
    EXCLUSAO_FORNECEDOR_NEGADA(HttpStatus.BAD_REQUEST, "N√£o √© poss√≠vel excluir um fornecedor com produtos associados."),

    // üîπ Erros 404 - NOT_FOUND
    PRODUTO_NAO_ENCONTRADO(HttpStatus.NOT_FOUND, "Produto n√£o encontrado para o ID fornecido."),
    VENDA_NAO_ENCONTRADA(HttpStatus.NOT_FOUND, "Venda n√£o encontrada para o ID fornecido."),
    FORNECEDOR_NAO_ENCONTRADO(HttpStatus.NOT_FOUND, "Fornecedor n√£o encontrado para o ID fornecido."),
    USUARIO_NAO_ENCONTRADO(HttpStatus.NOT_FOUND, "Usu√°rio n√£o encontrado."),

    // üîπ Erros 403 - FORBIDDEN
    SEM_PERMISSAO_CANCELAR_VENDA(HttpStatus.FORBIDDEN, "Usu√°rio n√£o tem permiss√£o para cancelar esta venda."),
    SEM_PERMISSAO_MODIFICAR_ESTOQUE(HttpStatus.FORBIDDEN, "Usu√°rio n√£o tem permiss√£o para modificar o estoque."),
    SEM_PERMISSAO_ACESSO_RELATORIOS(HttpStatus.FORBIDDEN, "Acesso negado aos relat√≥rios de vendas."),
    SEM_PERMISSAO_CADASTRO_PRODUTO(HttpStatus.FORBIDDEN, "Usu√°rio n√£o tem permiss√£o para cadastrar produtos."),
    VENDA_FINALIZADA_NAO_MODIFICAVEL(HttpStatus.FORBIDDEN, "Venda finalizada n√£o pode ser modificada.");

    private final HttpStatus status;
    private final String mensagem;
}
